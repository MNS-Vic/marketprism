# MarketPrism Collector TDD Makefile
# 
# 使用方法:
#   make -f Makefile_collector_tdd test-quick     # 快速测试
#   make -f Makefile_collector_tdd test-unit      # 单元测试
#   make -f Makefile_collector_tdd test-all       # 完整TDD测试

PYTHON := python3
PYTEST := $(PYTHON) -m pytest
PROJECT_ROOT := $(shell pwd)
TEST_DIR := tests
COLLECTOR_SRC := services/python-collector/src/marketprism_collector
VENV_DIR := venv_tdd

# 默认目标
.DEFAULT_GOAL := help

.PHONY: help
help: ## 显示帮助信息
	@echo "MarketPrism Collector TDD 测试命令:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""

.PHONY: install-deps
install-deps: ## 安装测试依赖
	@echo "📦 安装测试依赖..."
	$(PYTHON) -m pip install -r requirements.txt
	$(PYTHON) -m pip install pytest pytest-asyncio pytest-html pytest-json-report pytest-cov pytest-timeout pytest-benchmark
	@echo "✅ 依赖安装完成"

.PHONY: setup-test-env
setup-test-env: ## 设置测试环境
	@echo "🔧 设置测试环境..."
	mkdir -p $(TEST_DIR)/reports
	mkdir -p $(TEST_DIR)/temp
	mkdir -p logs/tests
	@echo "✅ 测试环境设置完成"

.PHONY: test-quick
test-quick: setup-test-env ## 快速测试核心功能
	@echo "⚡ 执行快速测试..."
	$(PYTHON) $(TEST_DIR)/quick_test_collector.py

.PHONY: test-unit
test-unit: setup-test-env ## 执行单元测试
	@echo "🧪 执行单元测试..."
	$(PYTEST) $(TEST_DIR)/unit/collector/ -v \
		--tb=short \
		--cov=$(COLLECTOR_SRC) \
		--cov-report=html:$(TEST_DIR)/reports/unit_coverage \
		--cov-report=json \
		--html=$(TEST_DIR)/reports/unit_test_report.html \
		--self-contained-html \
		--json-report --json-report-file=$(TEST_DIR)/reports/unit_test_results.json

.PHONY: test-integration
test-integration: setup-test-env ## 执行集成测试
	@echo "🔗 执行集成测试..."
	$(PYTEST) $(TEST_DIR)/integration/collector/ -v \
		--tb=short \
		--timeout=120 \
		--html=$(TEST_DIR)/reports/integration_test_report.html \
		--self-contained-html \
		--json-report --json-report-file=$(TEST_DIR)/reports/integration_test_results.json

.PHONY: test-e2e
test-e2e: setup-test-env ## 执行端到端测试
	@echo "🎯 执行端到端测试..."
	$(PYTEST) $(TEST_DIR)/e2e/collector/ -v \
		--tb=short \
		--timeout=300 \
		-m "not slow" \
		--html=$(TEST_DIR)/reports/e2e_test_report.html \
		--self-contained-html \
		--json-report --json-report-file=$(TEST_DIR)/reports/e2e_test_results.json

.PHONY: test-performance
test-performance: setup-test-env ## 执行性能测试
	@echo "🚀 执行性能测试..."
	$(PYTEST) $(TEST_DIR)/performance/collector/ -v \
		--tb=short \
		--timeout=600 \
		--benchmark-only \
		--benchmark-html=$(TEST_DIR)/reports/performance_report.html \
		--json-report --json-report-file=$(TEST_DIR)/reports/performance_test_results.json

.PHONY: test-all
test-all: setup-test-env ## 执行完整TDD测试套件
	@echo "🎯 执行完整TDD测试套件..."
	$(PYTHON) $(TEST_DIR)/run_collector_tdd.py --phase all

.PHONY: test-phase1
test-phase1: setup-test-env ## 执行阶段1测试（单元测试）
	@echo "🧪 执行阶段1测试（单元测试）..."
	$(PYTHON) $(TEST_DIR)/run_collector_tdd.py --phase unit

.PHONY: test-phase2
test-phase2: setup-test-env ## 执行阶段2测试（集成测试）
	@echo "🔗 执行阶段2测试（集成测试）..."
	$(PYTHON) $(TEST_DIR)/run_collector_tdd.py --phase integration

.PHONY: test-phase3
test-phase3: setup-test-env ## 执行阶段3测试（端到端测试）
	@echo "🎯 执行阶段3测试（端到端测试）..."
	$(PYTHON) $(TEST_DIR)/run_collector_tdd.py --phase e2e

.PHONY: test-fast
test-fast: setup-test-env ## 快速模式测试（跳过耗时测试）
	@echo "⚡ 执行快速模式测试..."
	$(PYTHON) $(TEST_DIR)/run_collector_tdd.py --fast

.PHONY: test-binance
test-binance: setup-test-env ## 测试Binance相关功能
	@echo "🔸 测试Binance相关功能..."
	$(PYTEST) -v -m "binance" \
		--tb=short \
		--timeout=120 \
		--html=$(TEST_DIR)/reports/binance_test_report.html

.PHONY: test-okx
test-okx: setup-test-env ## 测试OKX相关功能
	@echo "🔸 测试OKX相关功能..."
	$(PYTEST) -v -m "okx" \
		--tb=short \
		--timeout=120 \
		--html=$(TEST_DIR)/reports/okx_test_report.html

.PHONY: test-core-integration
test-core-integration: setup-test-env ## 测试Core模块集成
	@echo "🔧 测试Core模块集成..."
	$(PYTEST) -v -m "core_integration" \
		--tb=short \
		--cov=$(COLLECTOR_SRC) \
		--cov-report=html:$(TEST_DIR)/reports/core_integration_coverage \
		--html=$(TEST_DIR)/reports/core_integration_report.html

.PHONY: lint
lint: ## 代码检查
	@echo "🔍 执行代码检查..."
	$(PYTHON) -m flake8 $(COLLECTOR_SRC) --max-line-length=120
	$(PYTHON) -m mypy $(COLLECTOR_SRC) --ignore-missing-imports

.PHONY: format
format: ## 代码格式化
	@echo "✨ 格式化代码..."
	$(PYTHON) -m black $(COLLECTOR_SRC) --line-length=120
	$(PYTHON) -m isort $(COLLECTOR_SRC)

.PHONY: clean
clean: ## 清理测试文件和缓存
	@echo "🧹 清理测试文件和缓存..."
	rm -rf $(TEST_DIR)/reports/*
	rm -rf $(TEST_DIR)/temp/*
	rm -rf $(TEST_DIR)/.pytest_cache
	rm -rf $(COLLECTOR_SRC)/__pycache__
	find . -name "*.pyc" -delete
	find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
	@echo "✅ 清理完成"

.PHONY: clean-all
clean-all: clean ## 完全清理（包括虚拟环境）
	@echo "🧹 完全清理..."
	rm -rf $(VENV_DIR)
	rm -rf .coverage
	rm -rf htmlcov/
	@echo "✅ 完全清理完成"

.PHONY: coverage
coverage: ## 生成测试覆盖率报告
	@echo "📊 生成测试覆盖率报告..."
	$(PYTEST) $(TEST_DIR)/unit/collector/ $(TEST_DIR)/integration/collector/ \
		--cov=$(COLLECTOR_SRC) \
		--cov-report=html:$(TEST_DIR)/reports/coverage_html \
		--cov-report=json:$(TEST_DIR)/reports/coverage.json \
		--cov-report=term-missing
	@echo "✅ 覆盖率报告生成完成: $(TEST_DIR)/reports/coverage_html/index.html"

.PHONY: benchmark
benchmark: setup-test-env ## 运行基准测试
	@echo "🏃 执行基准测试..."
	$(PYTEST) $(TEST_DIR) -v \
		--benchmark-only \
		--benchmark-sort=mean \
		--benchmark-html=$(TEST_DIR)/reports/benchmark_report.html

.PHONY: stress-test
stress-test: setup-test-env ## 压力测试
	@echo "💪 执行压力测试..."
	$(PYTEST) $(TEST_DIR)/performance/collector/ -v \
		-m "stress" \
		--timeout=1800 \
		--tb=short

.PHONY: continuous
continuous: ## 持续测试模式
	@echo "🔄 启动持续测试模式..."
	$(PYTEST) -f $(TEST_DIR)/unit/collector/ \
		--tb=short \
		--maxfail=1

.PHONY: debug
debug: ## 调试模式测试
	@echo "🐛 调试模式测试..."
	$(PYTEST) $(TEST_DIR)/unit/collector/test_core_integration.py -v \
		--tb=long \
		--capture=no \
		--log-cli-level=DEBUG

.PHONY: check-env
check-env: ## 检查测试环境
	@echo "🔍 检查测试环境..."
	@echo "Python版本: $(shell $(PYTHON) --version)"
	@echo "pytest版本: $(shell $(PYTEST) --version)"
	@echo "项目根目录: $(PROJECT_ROOT)"
	@$(PYTHON) -c "import sys; print('Python路径:', sys.path[0])"
	@ls -la $(TEST_DIR)/
	@echo "✅ 环境检查完成"

.PHONY: install-test-data
install-test-data: ## 安装测试数据
	@echo "📥 安装测试数据..."
	mkdir -p $(TEST_DIR)/fixtures
	# 这里可以添加下载或生成测试数据的命令
	@echo "✅ 测试数据安装完成"

# 生成测试报告摘要
.PHONY: report-summary
report-summary: ## 生成测试报告摘要
	@echo "📋 生成测试报告摘要..."
	@if [ -f "$(TEST_DIR)/reports/tdd_final_report.json" ]; then \
		$(PYTHON) -c "import json; data=json.load(open('$(TEST_DIR)/reports/tdd_final_report.json')); print('整体成功率:', data['test_run_info']['overall_success_rate'], '%')"; \
	else \
		echo "没有找到最终报告文件"; \
	fi

# CI/CD 友好的测试命令
.PHONY: ci-test
ci-test: install-deps setup-test-env test-quick test-unit ## CI/CD测试流水线
	@echo "🚀 CI/CD测试流水线完成"

# 显示测试统计
.PHONY: stats
stats: ## 显示测试统计信息
	@echo "📊 测试统计信息:"
	@find $(TEST_DIR) -name "test_*.py" | wc -l | awk '{print "测试文件数量:", $$1}'
	@grep -r "def test_" $(TEST_DIR) | wc -l | awk '{print "测试函数数量:", $$1}'
	@grep -r "class Test" $(TEST_DIR) | wc -l | awk '{print "测试类数量:", $$1}'