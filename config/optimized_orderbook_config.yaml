# 优化OrderBook ClickHouse配置
# 用于配置完整400档深度数据的高效存储

clickhouse:
  # 基础连接配置
  host: "localhost"
  port: 8123  # HTTP端口
  database: "marketprism"
  user: "default"
  password: ""
  
  # 优化OrderBook配置
  optimized_orderbook:
    enabled: true
    
    # 存储配置
    store_full_depth: true          # 是否存储完整400档深度
    compression_level: 6            # 压缩级别 (1-9, 6为平衡点)
    enable_delta_compression: true  # 是否启用增量压缩
    
    # 写入配置
    batch_size: 50                  # 批量写入大小
    write_interval: 5               # 写入间隔(秒)
    
    # 表配置
    tables:
      orderbook_optimized: "orderbook_optimized"
      orderbook_deltas: "orderbook_deltas"
    
    # 分层存储配置
    layers:
      l1:  # 前50档 - 高频访问
        depth: 50
        compression_level: 3
        description: "高频查询层"
      l2:  # 51-200档 - 中频访问
        depth: 200
        compression_level: 6
        description: "中频查询层"
      l3:  # 201-400档 - 低频访问
        depth: 400
        compression_level: 9
        description: "低频查询层"
    
    # TTL配置
    ttl:
      hot_data: "1 DAY"           # 热数据保留时间
      delta_data: "7 DAY"         # 增量数据保留时间
      cold_data: "12 MONTH"       # 冷数据保留时间
    
    # 性能配置
    performance:
      index_granularity: 8192
      enable_compression_codec: true
      partition_by: "toYYYYMMDD(timestamp)"
      order_by: "(exchange_name, symbol_name, timestamp)"

# 传统OrderBook配置（保持兼容性）
legacy_orderbook:
  enabled: true                   # 保持现有20档存储
  table: "depth"
  
# 数据流配置
data_flow:
  # 同时写入优化表和传统表
  dual_write: true
  
  # 数据验证
  validation:
    enabled: true
    check_price_consistency: true
    check_depth_completeness: true
    max_spread_threshold: 0.1     # 最大价差阈值(%)
  
  # 监控配置
  monitoring:
    enabled: true
    metrics:
      - compression_ratio
      - write_latency
      - queue_size
      - validation_errors
    
    alerts:
      high_queue_size: 1000       # 队列大小告警阈值
      high_write_latency: 1.0     # 写入延迟告警阈值(秒)
      low_compression_ratio: 0.5  # 压缩比告警阈值

# 查询优化配置
query_optimization:
  # 预计算字段
  precomputed_fields:
    - best_bid_price
    - best_ask_price
    - spread
    - mid_price
    - bid_volume_1pct
    - ask_volume_1pct
    - total_bid_volume
    - total_ask_volume
  
  # 索引配置
  indexes:
    primary: "(exchange_name, symbol_name, timestamp)"
    secondary:
      - "timestamp"
      - "(exchange_name, symbol_name)"
      - "spread"
  
  # 物化视图
  materialized_views:
    # 实时价格视图
    real_time_prices:
      enabled: true
      query: |
        SELECT 
          exchange_name,
          symbol_name,
          best_bid_price,
          best_ask_price,
          spread,
          timestamp
        FROM orderbook_optimized
        WHERE timestamp >= now() - INTERVAL 1 HOUR
    
    # 深度统计视图
    depth_statistics:
      enabled: true
      query: |
        SELECT 
          exchange_name,
          symbol_name,
          toStartOfMinute(timestamp) as minute,
          avg(spread) as avg_spread,
          avg(total_bid_volume) as avg_bid_volume,
          avg(total_ask_volume) as avg_ask_volume,
          count() as update_count
        FROM orderbook_optimized
        WHERE timestamp >= now() - INTERVAL 24 HOUR
        GROUP BY exchange_name, symbol_name, minute

# 部署配置
deployment:
  # 环境配置
  environment: "production"  # development, staging, production
  
  # 资源配置
  resources:
    memory_limit: "2Gi"
    cpu_limit: "1000m"
    disk_space: "100Gi"
  
  # 高可用配置
  high_availability:
    enabled: true
    replicas: 2
    backup_interval: "1 HOUR"
    
  # 扩展配置
  scaling:
    auto_scaling: true
    min_replicas: 1
    max_replicas: 5
    cpu_threshold: 70
    memory_threshold: 80

# 日志配置
logging:
  level: "INFO"  # DEBUG, INFO, WARNING, ERROR
  format: "json"
  
  # 特定组件日志级别
  components:
    orderbook_writer: "INFO"
    compression: "DEBUG"
    validation: "WARNING"
  
  # 日志输出
  outputs:
    - type: "console"
    - type: "file"
      path: "/var/log/marketprism/orderbook.log"
      rotation: "daily"
      retention: "30d"

# 开发和测试配置
development:
  # 测试数据生成
  mock_data:
    enabled: false
    exchanges: ["binance", "okx"]
    symbols: ["BTCUSDT", "ETHUSDT"]
    depth_levels: 400
    update_frequency: 1  # 秒
  
  # 性能测试
  performance_testing:
    enabled: false
    scenarios:
      - name: "high_frequency_updates"
        updates_per_second: 100
        duration: "10m"
      - name: "large_depth"
        depth_levels: 1000
        duration: "5m"
  
  # 调试配置
  debug:
    enable_query_logging: false
    enable_compression_stats: true
    enable_memory_profiling: false