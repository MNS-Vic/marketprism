#!/usr/bin/env python3\n\"\"\"\n简化的Deribit连接调试脚本\n直接使用aiohttp测试WebSocket连接\n\"\"\"\n\nimport asyncio\nimport aiohttp\nimport json\nimport os\nimport sys\nfrom datetime import datetime\n\n\nasync def test_deribit_direct():\n    \"\"\"直接测试Deribit WebSocket连接\"\"\"\n    print(\"🟣 开始测试Deribit直接WebSocket连接\")\n    print(\"=\" * 50)\n    \n    # WebSocket URL\n    ws_url = \"wss://www.deribit.com/ws/api/v2\"\n    \n    # 获取代理设置\n    proxy = os.getenv('https_proxy') or os.getenv('http_proxy')\n    print(f\"📡 代理设置: {proxy}\")\n    print(f\"🌐 WebSocket URL: {ws_url}\")\n    \n    session = None\n    ws = None\n    \n    try:\n        # 创建session\n        timeout = aiohttp.ClientTimeout(total=30)\n        session = aiohttp.ClientSession(timeout=timeout)\n        \n        print(\"🔗 尝试WebSocket连接...\")\n        start_time = datetime.now()\n        \n        # 方式1：使用代理连接\n        if proxy:\n            print(f\"🔄 使用代理连接: {proxy}\")\n            ws = await session.ws_connect(\n                ws_url,\n                proxy=proxy,\n                ssl=False,  # 禁用SSL验证\n                heartbeat=30\n            )\n        else:\n            print(\"🔄 直接连接（无代理）\")\n            ws = await session.ws_connect(\n                ws_url,\n                ssl=False,  # 禁用SSL验证\n                heartbeat=30\n            )\n        \n        connect_time = datetime.now()\n        print(f\"✅ WebSocket连接成功！耗时: {(connect_time - start_time).total_seconds():.2f}秒\")\n        \n        # 测试订阅\n        subscribe_msg = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": 1,\n            \"method\": \"public/subscribe\",\n            \"params\": {\n                \"channels\": [\"ticker.BTC-PERPETUAL.100ms\"]\n            }\n        }\n        \n        print(\"📤 发送订阅请求...\")\n        await ws.send_str(json.dumps(subscribe_msg))\n        \n        # 等待响应\n        message_count = 0\n        test_duration = 10  # 测试10秒\n        timeout_time = datetime.now().timestamp() + test_duration\n        \n        print(f\"⏳ 等待消息... ({test_duration}秒)\")\n        \n        async for msg in ws:\n            if datetime.now().timestamp() > timeout_time:\n                break\n                \n            if msg.type == aiohttp.WSMsgType.TEXT:\n                data = json.loads(msg.data)\n                message_count += 1\n                \n                if message_count <= 3:  # 只显示前3条消息\n                    print(f\"📨 消息 {message_count}: {json.dumps(data, indent=2)[:200]}...\")\n                \n                if message_count == 1 and \"result\" in data:\n                    print(\"✅ 订阅确认收到\")\n                \n            elif msg.type == aiohttp.WSMsgType.ERROR:\n                print(f\"❌ WebSocket错误: {msg.data}\")\n                break\n            elif msg.type == aiohttp.WSMsgType.CLOSE:\n                print(\"🔚 WebSocket连接关闭\")\n                break\n        \n        print(f\"\\n📊 测试结果:\")\n        print(f\"   ✅ 连接成功: 是\")\n        print(f\"   📨 收到消息数: {message_count}\")\n        print(f\"   ⏱️ 测试时长: {test_duration}秒\")\n        \n        return True\n        \n    except asyncio.TimeoutError:\n        print(\"❌ 连接超时\")\n        return False\n    except Exception as e:\n        print(f\"❌ 连接失败: {type(e).__name__}: {str(e)}\")\n        return False\n    finally:\n        # 清理\n        if ws:\n            await ws.close()\n        if session:\n            await session.close()\n\n\nasync def test_curl_comparison():\n    \"\"\"对比curl测试结果\"\"\"\n    print(\"\\n🌐 curl对比测试\")\n    print(\"=\" * 30)\n    \n    import subprocess\n    \n    # 测试REST API\n    proxy = os.getenv('https_proxy') or os.getenv('http_proxy')\n    if proxy:\n        cmd = f\"curl -x {proxy} --connect-timeout 10 https://www.deribit.com/api/v2/public/get_time\"\n    else:\n        cmd = \"curl --connect-timeout 10 https://www.deribit.com/api/v2/public/get_time\"\n    \n    try:\n        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=15)\n        if result.returncode == 0:\n            print(f\"✅ curl REST API成功: {result.stdout[:100]}...\")\n        else:\n            print(f\"❌ curl REST API失败: {result.stderr}\")\n    except Exception as e:\n        print(f\"❌ curl测试异常: {e}\")\n\n\nasync def main():\n    \"\"\"主函数\"\"\"\n    print(\"🚀 Deribit WebSocket 连接调试\")\n    print(\"=\" * 60)\n    \n    # 检查环境变量\n    print(f\"🔧 环境检查:\")\n    print(f\"   http_proxy: {os.getenv('http_proxy')}\")\n    print(f\"   https_proxy: {os.getenv('https_proxy')}\")\n    print(f\"   Python版本: {sys.version}\")\n    \n    # 测试curl对比\n    await test_curl_comparison()\n    \n    # 测试WebSocket连接\n    success = await test_deribit_direct()\n    \n    if success:\n        print(\"\\n🎉 Deribit WebSocket连接测试成功！\")\n    else:\n        print(\"\\n❌ Deribit WebSocket连接测试失败\")\n    \n    return success\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n"