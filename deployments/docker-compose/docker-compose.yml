# MarketPrism 智能监控告警系统 Docker Compose 部署配置

version: '3.8'

services:
  # 智能监控告警服务
  monitoring-alerting:
    build:
      context: ../../services/monitoring-alerting-service
      dockerfile: Dockerfile
    container_name: marketprism-monitoring-alerting
    restart: unless-stopped
    ports:
      - "${MONITORING_PORT:-8082}:8082"
    environment:
      # 基础配置
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENVIRONMENT=${ENVIRONMENT:-production}
      
      # 数据库连接
      - REDIS_URL=redis://redis:6379/0
      - CLICKHOUSE_URL=http://clickhouse:8123
      - CLICKHOUSE_DATABASE=${CLICKHOUSE_DATABASE:-marketprism}
      - CLICKHOUSE_USER=${CLICKHOUSE_USER:-default}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-}
      
      # 通知配置
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - DINGTALK_WEBHOOK_URL=${DINGTALK_WEBHOOK_URL}
      - DINGTALK_SECRET=${DINGTALK_SECRET}
      
      # 安全配置
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY=${API_KEY}
      
      # 性能配置
      - MAX_WORKERS=${MAX_WORKERS:-10}
      - BATCH_SIZE=${BATCH_SIZE:-100}
      - CACHE_SIZE=${CACHE_SIZE:-1000}
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - monitoring-data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - marketprism-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.monitoring.rule=Host(`monitoring.${DOMAIN:-localhost}`)"
      - "traefik.http.services.monitoring.loadbalancer.server.port=8082"

  # 智能监控告警前端 (暂时注释，先部署后端)
  # monitoring-dashboard:
  #   build:
  #     context: "../../services/monitoring-alerting-service/market-prism-dashboard "
  #     dockerfile: Dockerfile
  #   container_name: marketprism-monitoring-dashboard
  #   restart: unless-stopped
  #   ports:
  #     - "${DASHBOARD_PORT:-3000}:3000"
  #   environment:
  #     - NEXT_PUBLIC_API_URL=http://monitoring-alerting:8082/api/v1
  #     - NODE_ENV=production
  #   depends_on:
  #     - monitoring-alerting
  #   networks:
  #     - marketprism-network
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.dashboard.rule=Host(`dashboard.${DOMAIN:-localhost}`)"
  #     - "traefik.http.services.dashboard.loadbalancer.server.port=3000"

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: marketprism-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - marketprism-network

  # ClickHouse数据库
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: marketprism-clickhouse
    restart: unless-stopped
    ports:
      - "${CLICKHOUSE_HTTP_PORT:-8123}:8123"
      - "${CLICKHOUSE_TCP_PORT:-9000}:9000"
    environment:
      - CLICKHOUSE_DB=${CLICKHOUSE_DATABASE:-marketprism}
      - CLICKHOUSE_USER=${CLICKHOUSE_USER:-default}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD:-}
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./clickhouse/config.xml:/etc/clickhouse-server/config.xml:ro
      - ./clickhouse/users.xml:/etc/clickhouse-server/users.xml:ro
      - ./clickhouse/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - marketprism-network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: marketprism-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - marketprism-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN:-localhost}`)"

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: marketprism-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - marketprism-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN:-localhost}`)"

  # Jaeger分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: marketprism-jaeger
    restart: unless-stopped
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    volumes:
      - jaeger-data:/tmp
    networks:
      - marketprism-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.${DOMAIN:-localhost}`)"

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: marketprism-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - monitoring-alerting
      - grafana
      - prometheus
    networks:
      - marketprism-network

  # Traefik负载均衡器（可选）
  traefik:
    image: traefik:v2.10
    container_name: marketprism-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/acme.json:/acme.json
    networks:
      - marketprism-network
    profiles:
      - traefik

# 网络配置
networks:
  marketprism-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷
volumes:
  monitoring-data:
    driver: local
  redis-data:
    driver: local
  clickhouse-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  jaeger-data:
    driver: local
  nginx-logs:
    driver: local
