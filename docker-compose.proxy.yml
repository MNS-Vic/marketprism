version: '3.8'

# 代理网络配置
x-proxy-environment: &proxy-environment
  HTTP_PROXY: ${HTTP_PROXY:-}
  HTTPS_PROXY: ${HTTPS_PROXY:-}
  NO_PROXY: ${NO_PROXY:-localhost,127.0.0.1,redis,postgres,nats,prometheus}

services:
  redis:
    image: redis:7-alpine
    container_name: marketprism-redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    environment:
      <<: *proxy-environment
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - marketprism-network

  postgres:
    image: postgres:15-alpine
    container_name: marketprism-postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    environment:
      <<: *proxy-environment
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - marketprism-network

  nats:
    image: nats:2-alpine
    container_name: marketprism-nats
    ports:
      - "4222:4222"
      - "8222:8222"
    restart: unless-stopped
    command: ["-js", "-m", "8222"]
    environment:
      <<: *proxy-environment
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8222/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - marketprism-network

  prometheus:
    image: prom/prometheus:latest
    container_name: marketprism-prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      <<: *proxy-environment
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - marketprism-network

  data-collector:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - HTTP_PROXY=${HTTP_PROXY:-}
        - HTTPS_PROXY=${HTTPS_PROXY:-}
    container_name: marketprism-data-collector
    ports:
      - "8080:8080"
    restart: unless-stopped
    environment:
      <<: *proxy-environment
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      NATS_URL: nats://nats:4222
      PROMETHEUS_ENABLED: "true"
      ALERTING_ENABLED: "true"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - marketprism-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  marketprism-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
