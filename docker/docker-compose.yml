# MarketPrism 微服务容器化部署配置
# Phase 4: 优化与部署 - Docker Compose配置

version: '3.8'

networks:
  marketprism:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  marketprism_data:
    driver: local
  marketprism_logs:
    driver: local
  nats_data:
    driver: local
  clickhouse_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # ============================================================================
  # 基础设施服务
  # ============================================================================
  
  # ClickHouse 数据库
  clickhouse:
    image: clickhouse/clickhouse-server:23.3
    container_name: marketprism-clickhouse
    networks:
      marketprism:
        ipv4_address: 172.20.0.10
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse/init:/docker-entrypoint-initdb.d
      - ./clickhouse/config:/etc/clickhouse-server/config.d
    environment:
      CLICKHOUSE_DB: marketprism
      CLICKHOUSE_USER: marketprism_user
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    healthcheck:
      test: ["CMD", "clickhouse", "client", "--query", "SELECT 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: marketprism-redis
    networks:
      marketprism:
        ipv4_address: 172.20.0.11
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # NATS 消息代理
  nats:
    image: nats:2.10-alpine
    container_name: marketprism-nats
    networks:
      marketprism:
        ipv4_address: 172.20.0.12
    ports:
      - "4222:4222"
      - "6222:6222"
      - "8222:8222"
    volumes:
      - nats_data:/data
      - ./nats/nats.conf:/etc/nats/nats.conf
    command: ["-c", "/etc/nats/nats.conf", "-js"]
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/varz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # ============================================================================
  # 监控服务
  # ============================================================================
  
  # Prometheus 监控
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: marketprism-prometheus
    networks:
      marketprism:
        ipv4_address: 172.20.0.20
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - monitoring-service

  # Grafana 仪表板
  grafana:
    image: grafana/grafana:10.1.0
    container_name: marketprism-grafana
    networks:
      marketprism:
        ipv4_address: 172.20.0.21
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      GF_SECURITY_ADMIN_PASSWORD: marketprism_admin
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - prometheus

  # ============================================================================
  # MarketPrism 微服务
  # ============================================================================

  # API网关服务
  api-gateway-service:
    build:
      context: ../
      dockerfile: docker/services/Dockerfile.api-gateway
    container_name: marketprism-api-gateway
    networks:
      marketprism:
        ipv4_address: 172.20.0.30
    ports:
      - "8080:8080"
    volumes:
      - marketprism_logs:/app/logs
      - ../config:/app/config
    environment:
      PYTHONPATH: /app
      MARKETPRISM_ENV: production
      LOG_LEVEL: INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    depends_on:
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy

  # 数据存储服务
  data-storage-service:
    build:
      context: ../
      dockerfile: docker/services/Dockerfile.data-storage
    container_name: marketprism-data-storage
    networks:
      marketprism:
        ipv4_address: 172.20.0.31
    ports:
      - "8082:8082"
    volumes:
      - marketprism_data:/app/data
      - marketprism_logs:/app/logs
      - ../config:/app/config
    environment:
      PYTHONPATH: /app
      MARKETPRISM_ENV: production
      LOG_LEVEL: INFO
      CLICKHOUSE_HOST: clickhouse
      REDIS_HOST: redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    depends_on:
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy

  # 市场数据采集服务
  market-data-collector:
    build:
      context: ../
      dockerfile: docker/services/Dockerfile.market-data-collector
    container_name: marketprism-market-data-collector
    networks:
      marketprism:
        ipv4_address: 172.20.0.32
    ports:
      - "8081:8081"
    volumes:
      - marketprism_logs:/app/logs
      - ../config:/app/config
    environment:
      PYTHONPATH: /app
      MARKETPRISM_ENV: production
      LOG_LEVEL: INFO
      NATS_URL: nats://nats:4222
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    depends_on:
      nats:
        condition: service_healthy
      data-storage-service:
        condition: service_healthy

  # 调度服务
  scheduler-service:
    build:
      context: ../
      dockerfile: docker/services/Dockerfile.scheduler
    container_name: marketprism-scheduler
    networks:
      marketprism:
        ipv4_address: 172.20.0.33
    ports:
      - "8084:8084"
    volumes:
      - marketprism_logs:/app/logs
      - ../config:/app/config
    environment:
      PYTHONPATH: /app
      MARKETPRISM_ENV: production
      LOG_LEVEL: INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    depends_on:
      data-storage-service:
        condition: service_healthy

  # 监控服务
  monitoring-service:
    build:
      context: ../
      dockerfile: docker/services/Dockerfile.monitoring
    container_name: marketprism-monitoring
    networks:
      marketprism:
        ipv4_address: 172.20.0.34
    ports:
      - "8083:8083"
    volumes:
      - marketprism_logs:/app/logs
      - ../config:/app/config
    environment:
      PYTHONPATH: /app
      MARKETPRISM_ENV: production
      LOG_LEVEL: INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    depends_on:
      api-gateway-service:
        condition: service_healthy
      data-storage-service:
        condition: service_healthy
      market-data-collector:
        condition: service_healthy
      scheduler-service:
        condition: service_healthy

  # 消息代理服务
  message-broker-service:
    build:
      context: ../
      dockerfile: docker/services/Dockerfile.message-broker
    container_name: marketprism-message-broker
    networks:
      marketprism:
        ipv4_address: 172.20.0.35
    ports:
      - "8085:8085"
    volumes:
      - marketprism_logs:/app/logs
      - ../config:/app/config
    environment:
      PYTHONPATH: /app
      MARKETPRISM_ENV: production
      LOG_LEVEL: INFO
      NATS_URL: nats://nats:4222
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    depends_on:
      nats:
        condition: service_healthy

# ============================================================================
# 部署配置说明
# ============================================================================

# 启动命令：
# docker-compose up -d

# 查看状态：
# docker-compose ps

# 查看日志：
# docker-compose logs -f [service_name]

# 停止服务：
# docker-compose down

# 完全清理：
# docker-compose down -v --remove-orphans

# 扩展服务：
# docker-compose up -d --scale market-data-collector=2

# 网络结构：
# - 172.20.0.10-19: 基础设施服务 (ClickHouse, Redis, NATS)
# - 172.20.0.20-29: 监控服务 (Prometheus, Grafana)
# - 172.20.0.30-39: MarketPrism微服务