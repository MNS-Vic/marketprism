#!/usr/bin/env python3
"""
MarketPrism ClickHouse Êï∞ÊçÆÂ∫ìÁÆÄÂåñÂàùÂßãÂåñËÑöÊú¨
Áõ¥Êé•‰ΩøÁî®ClickHouse HTTP APIÂàõÂª∫Êï∞ÊçÆÂ∫ìÂíåË°®ÁªìÊûÑ
"""

import asyncio
import sys
import os
from pathlib import Path
import yaml
import aiohttp
import json


class SimpleClickHouseInitializer:
    """ÁÆÄÂåñÁöÑClickHouseÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂô®"""
    
    def __init__(self, config: dict):
        """
        ÂàùÂßãÂåñClickHouseÂàùÂßãÂåñÂô®
        
        Args:
            config: ÈÖçÁΩÆÂ≠óÂÖ∏
        """
        self.config = config
        
        # ÁÉ≠Á´ØÂíåÂÜ∑Á´ØÈÖçÁΩÆ
        self.hot_config = config.get('hot_storage', {})
        self.cold_config = config.get('cold_storage', {})
    
    async def initialize(self):
        """ÂàùÂßãÂåñClickHouseÊï∞ÊçÆÂ∫ì"""
        try:
            print("üöÄ ÂºÄÂßãÂàùÂßãÂåñClickHouseÊï∞ÊçÆÂ∫ì")
            
            # ÂàùÂßãÂåñÁÉ≠Á´ØÊï∞ÊçÆÂ∫ì
            await self._initialize_hot_storage()
            
            # ÂàùÂßãÂåñÂÜ∑Á´ØÊï∞ÊçÆÂ∫ìÔºàÂ¶ÇÊûúÈÖçÁΩÆ‰∫Ü‰∏çÂêåÁöÑ‰∏ªÊú∫Ôºâ
            if self.cold_config.get('clickhouse_host') != self.hot_config.get('clickhouse_host'):
                await self._initialize_cold_storage()
            else:
                print("üîÑ ÂÜ∑Á´ØÂíåÁÉ≠Á´Ø‰ΩøÁî®Áõ∏ÂêåÊï∞ÊçÆÂ∫ìÔºåË∑≥ËøáÂÜ∑Á´ØÂàùÂßãÂåñ")
            
            print("‚úÖ ClickHouseÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂÆåÊàê")
            
        except Exception as e:
            print(f"‚ùå ClickHouseÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂ§±Ë¥•: {e}")
            raise
    
    async def _initialize_hot_storage(self):
        """ÂàùÂßãÂåñÁÉ≠Á´ØÂ≠òÂÇ®"""
        try:
            print("üî• ÂàùÂßãÂåñÁÉ≠Á´ØClickHouseÊï∞ÊçÆÂ∫ì")
            
            host = self.hot_config.get('clickhouse_host', 'localhost')
            port = self.hot_config.get('clickhouse_http_port', 8123)
            user = self.hot_config.get('clickhouse_user', 'default')
            password = self.hot_config.get('clickhouse_password', '')
            database = self.hot_config.get('clickhouse_database', 'marketprism_hot')
            
            # ÂàõÂª∫Êï∞ÊçÆÂ∫ì
            await self._create_database(host, port, user, password, database)
            
            # ÂàõÂª∫Ë°®ÁªìÊûÑ
            await self._create_tables(host, port, user, password, database, 'hot')
            
            print("‚úÖ ÁÉ≠Á´ØClickHouseÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂÆåÊàê")
            
        except Exception as e:
            print(f"‚ùå ÁÉ≠Á´ØClickHouseÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂ§±Ë¥•: {e}")
            raise
    
    async def _initialize_cold_storage(self):
        """ÂàùÂßãÂåñÂÜ∑Á´ØÂ≠òÂÇ®"""
        try:
            print("üßä ÂàùÂßãÂåñÂÜ∑Á´ØClickHouseÊï∞ÊçÆÂ∫ì")
            
            host = self.cold_config.get('clickhouse_host', 'localhost')
            port = self.cold_config.get('clickhouse_http_port', 8123)
            user = self.cold_config.get('clickhouse_user', 'default')
            password = self.cold_config.get('clickhouse_password', '')
            database = self.cold_config.get('clickhouse_database', 'marketprism_cold')
            
            # ÂàõÂª∫Êï∞ÊçÆÂ∫ì
            await self._create_database(host, port, user, password, database)
            
            # ÂàõÂª∫Ë°®ÁªìÊûÑ
            await self._create_tables(host, port, user, password, database, 'cold')
            
            print("‚úÖ ÂÜ∑Á´ØClickHouseÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂÆåÊàê")
            
        except Exception as e:
            print(f"‚ùå ÂÜ∑Á´ØClickHouseÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂ§±Ë¥•: {e}")
            raise
    
    async def _create_database(self, host: str, port: int, user: str, password: str, database: str):
        """ÂàõÂª∫Êï∞ÊçÆÂ∫ì"""
        try:
            query = f"CREATE DATABASE IF NOT EXISTS {database}"
            await self._execute_query(host, port, user, password, query)
            print(f"‚úÖ Êï∞ÊçÆÂ∫ìÂàõÂª∫ÊàêÂäü: {database}")
        except Exception as e:
            print(f"‚ùå Êï∞ÊçÆÂ∫ìÂàõÂª∫Â§±Ë¥• {database}: {e}")
            raise
    
    async def _create_tables(self, host: str, port: int, user: str, password: str, database: str, storage_type: str):
        """ÂàõÂª∫Ë°®ÁªìÊûÑ"""
        try:
            # ÂàáÊç¢Âà∞ÁõÆÊ†áÊï∞ÊçÆÂ∫ì
            await self._execute_query(host, port, user, password, f"USE {database}")
            
            # ÂÆö‰πâË°®ÁªìÊûÑ
            tables = self._get_table_definitions(storage_type)
            
            # ÂàõÂª∫Ë°®
            for table_name, table_sql in tables.items():
                try:
                    await self._execute_query(host, port, user, password, table_sql)
                    print(f"‚úÖ Ë°®ÂàõÂª∫ÊàêÂäü: {table_name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è Ë°®ÂàõÂª∫Â§±Ë¥• {table_name}: {e}")
            
            print(f"‚úÖ Ë°®ÁªìÊûÑÂàõÂª∫ÂÆåÊàê: {storage_type}")
            
        except Exception as e:
            print(f"‚ùå Ë°®ÁªìÊûÑÂàõÂª∫Â§±Ë¥• {storage_type}: {e}")
            raise
    
    def _get_table_definitions(self, storage_type: str) -> dict:
        """Ëé∑ÂèñË°®ÂÆö‰πâ"""
        ttl_days = 3 if storage_type == 'hot' else 365
        
        return {
            "orderbooks": f"""
                CREATE TABLE IF NOT EXISTS orderbooks (
                    timestamp DateTime64(3, 'UTC') CODEC(Delta, ZSTD),
                    exchange LowCardinality(String) CODEC(ZSTD),
                    market_type LowCardinality(String) CODEC(ZSTD),
                    symbol LowCardinality(String) CODEC(ZSTD),
                    last_update_id UInt64 CODEC(Delta, ZSTD),
                    bids_count UInt32 CODEC(Delta, ZSTD),
                    asks_count UInt32 CODEC(Delta, ZSTD),
                    best_bid_price Decimal64(8) CODEC(ZSTD),
                    best_ask_price Decimal64(8) CODEC(ZSTD),
                    best_bid_quantity Decimal64(8) CODEC(ZSTD),
                    best_ask_quantity Decimal64(8) CODEC(ZSTD),
                    bids String CODEC(ZSTD),
                    asks String CODEC(ZSTD),
                    data_source LowCardinality(String) DEFAULT 'marketprism' CODEC(ZSTD),
                    created_at DateTime DEFAULT now() CODEC(Delta, ZSTD)
                )
                ENGINE = MergeTree()
                PARTITION BY (toYYYYMM(timestamp), exchange)
                ORDER BY (timestamp, exchange, symbol, last_update_id)
                TTL toDateTime(timestamp) + INTERVAL {ttl_days} DAY DELETE
                SETTINGS index_granularity = 8192
            """,

            "trades": f"""
                CREATE TABLE IF NOT EXISTS trades (
                    timestamp DateTime64(3, 'UTC') CODEC(Delta, ZSTD),
                    exchange LowCardinality(String) CODEC(ZSTD),
                    market_type LowCardinality(String) CODEC(ZSTD),
                    symbol LowCardinality(String) CODEC(ZSTD),
                    trade_id String CODEC(ZSTD),
                    price Decimal64(8) CODEC(ZSTD),
                    quantity Decimal64(8) CODEC(ZSTD),
                    side LowCardinality(String) CODEC(ZSTD),
                    is_maker Bool DEFAULT false CODEC(ZSTD),
                    trade_time DateTime64(3, 'UTC') CODEC(Delta, ZSTD),
                    data_source LowCardinality(String) DEFAULT 'marketprism' CODEC(ZSTD),
                    created_at DateTime DEFAULT now() CODEC(Delta, ZSTD)
                )
                ENGINE = MergeTree()
                PARTITION BY (toYYYYMM(timestamp), exchange)
                ORDER BY (timestamp, exchange, symbol, trade_id)
                TTL toDateTime(timestamp) + INTERVAL {ttl_days} DAY DELETE
                SETTINGS index_granularity = 8192
            """,
            
            "funding_rates": f"""
                CREATE TABLE IF NOT EXISTS funding_rates (
                    timestamp DateTime64(3, 'UTC') CODEC(Delta, ZSTD),
                    exchange LowCardinality(String) CODEC(ZSTD),
                    market_type LowCardinality(String) CODEC(ZSTD),
                    symbol LowCardinality(String) CODEC(ZSTD),
                    funding_rate Decimal64(8) CODEC(ZSTD),
                    funding_time DateTime64(3, 'UTC') CODEC(Delta, ZSTD),
                    next_funding_time DateTime64(3, 'UTC') CODEC(Delta, ZSTD),
                    mark_price Decimal64(8) CODEC(ZSTD),
                    index_price Decimal64(8) CODEC(ZSTD),
                    data_source LowCardinality(String) DEFAULT 'marketprism' CODEC(ZSTD),
                    created_at DateTime DEFAULT now() CODEC(Delta, ZSTD)
                )
                ENGINE = MergeTree()
                PARTITION BY (toYYYYMM(timestamp), exchange)
                ORDER BY (timestamp, exchange, symbol)
                TTL toDateTime(timestamp) + INTERVAL {ttl_days} DAY DELETE
                SETTINGS index_granularity = 8192
            """,

            "open_interests": f"""
                CREATE TABLE IF NOT EXISTS open_interests (
                    timestamp DateTime64(3, 'UTC') CODEC(Delta, ZSTD),
                    exchange LowCardinality(String) CODEC(ZSTD),
                    market_type LowCardinality(String) CODEC(ZSTD),
                    symbol LowCardinality(String) CODEC(ZSTD),
                    open_interest Decimal64(8) CODEC(ZSTD),
                    open_interest_value Decimal64(8) CODEC(ZSTD),
                    count UInt64 CODEC(Delta, ZSTD),
                    data_source LowCardinality(String) DEFAULT 'marketprism' CODEC(ZSTD),
                    created_at DateTime DEFAULT now() CODEC(Delta, ZSTD)
                )
                ENGINE = MergeTree()
                PARTITION BY (toYYYYMM(timestamp), exchange)
                ORDER BY (timestamp, exchange, symbol)
                TTL toDateTime(timestamp) + INTERVAL {ttl_days} DAY DELETE
                SETTINGS index_granularity = 8192
            """,

            "liquidations": f"""
                CREATE TABLE IF NOT EXISTS liquidations (
                    timestamp DateTime64(3, 'UTC') CODEC(Delta, ZSTD),
                    exchange LowCardinality(String) CODEC(ZSTD),
                    market_type LowCardinality(String) CODEC(ZSTD),
                    symbol LowCardinality(String) CODEC(ZSTD),
                    side LowCardinality(String) CODEC(ZSTD),
                    price Decimal64(8) CODEC(ZSTD),
                    quantity Decimal64(8) CODEC(ZSTD),
                    liquidation_time DateTime64(3, 'UTC') CODEC(Delta, ZSTD),
                    data_source LowCardinality(String) DEFAULT 'marketprism' CODEC(ZSTD),
                    created_at DateTime DEFAULT now() CODEC(Delta, ZSTD)
                )
                ENGINE = MergeTree()
                PARTITION BY (toYYYYMM(timestamp), exchange)
                ORDER BY (timestamp, exchange, symbol)
                TTL toDateTime(timestamp) + INTERVAL {ttl_days} DAY DELETE
                SETTINGS index_granularity = 8192
            """,

            "lsrs": f"""
                CREATE TABLE IF NOT EXISTS lsrs (
                    timestamp DateTime64(3, 'UTC') CODEC(Delta, ZSTD),
                    exchange LowCardinality(String) CODEC(ZSTD),
                    market_type LowCardinality(String) CODEC(ZSTD),
                    symbol LowCardinality(String) CODEC(ZSTD),
                    long_short_ratio Decimal64(8) CODEC(ZSTD),
                    long_account Decimal64(8) CODEC(ZSTD),
                    short_account Decimal64(8) CODEC(ZSTD),
                    period LowCardinality(String) CODEC(ZSTD),
                    data_source LowCardinality(String) DEFAULT 'marketprism' CODEC(ZSTD),
                    created_at DateTime DEFAULT now() CODEC(Delta, ZSTD)
                )
                ENGINE = MergeTree()
                PARTITION BY (toYYYYMM(timestamp), exchange)
                ORDER BY (timestamp, exchange, symbol, period)
                TTL toDateTime(timestamp) + INTERVAL {ttl_days} DAY DELETE
                SETTINGS index_granularity = 8192
            """,

            "volatility_indices": f"""
                CREATE TABLE IF NOT EXISTS volatility_indices (
                    timestamp DateTime64(3, 'UTC') CODEC(Delta, ZSTD),
                    exchange LowCardinality(String) CODEC(ZSTD),
                    market_type LowCardinality(String) CODEC(ZSTD),
                    symbol LowCardinality(String) CODEC(ZSTD),
                    index_value Decimal64(8) CODEC(ZSTD),
                    underlying_asset LowCardinality(String) CODEC(ZSTD),
                    maturity_date Date CODEC(ZSTD),
                    data_source LowCardinality(String) DEFAULT 'marketprism' CODEC(ZSTD),
                    created_at DateTime DEFAULT now() CODEC(Delta, ZSTD)
                )
                ENGINE = MergeTree()
                PARTITION BY (toYYYYMM(timestamp), exchange)
                ORDER BY (timestamp, exchange, symbol)
                TTL toDateTime(timestamp) + INTERVAL {ttl_days} DAY DELETE
                SETTINGS index_granularity = 8192
            """
        }
    
    async def _execute_query(self, host: str, port: int, user: str, password: str, query: str):
        """ÊâßË°åClickHouseÊü•ËØ¢"""
        url = f"http://{host}:{port}/"
        
        auth = None
        if user and password:
            auth = aiohttp.BasicAuth(user, password)
        elif user:
            auth = aiohttp.BasicAuth(user, '')
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=query, auth=auth) as response:
                if response.status != 200:
                    error_text = await response.text()
                    raise Exception(f"ClickHouseÊü•ËØ¢Â§±Ë¥• (Áä∂ÊÄÅÁ†Å: {response.status}): {error_text}")
                
                return await response.text()
    
    async def verify_setup(self):
        """È™åËØÅÊï∞ÊçÆÂ∫ìËÆæÁΩÆ"""
        try:
            print("üîç È™åËØÅClickHouseÊï∞ÊçÆÂ∫ìËÆæÁΩÆ")
            
            # È™åËØÅÁÉ≠Á´ØÊï∞ÊçÆÂ∫ì
            await self._verify_database(
                self.hot_config.get('clickhouse_host', 'localhost'),
                self.hot_config.get('clickhouse_http_port', 8123),
                self.hot_config.get('clickhouse_user', 'default'),
                self.hot_config.get('clickhouse_password', ''),
                self.hot_config.get('clickhouse_database', 'marketprism_hot'),
                "ÁÉ≠Á´Ø"
            )
            
            # È™åËØÅÂÜ∑Á´ØÊï∞ÊçÆÂ∫ìÔºàÂ¶ÇÊûú‰∏çÂêåÔºâ
            if self.cold_config.get('clickhouse_host') != self.hot_config.get('clickhouse_host'):
                await self._verify_database(
                    self.cold_config.get('clickhouse_host', 'localhost'),
                    self.cold_config.get('clickhouse_http_port', 8123),
                    self.cold_config.get('clickhouse_user', 'default'),
                    self.cold_config.get('clickhouse_password', ''),
                    self.cold_config.get('clickhouse_database', 'marketprism_cold'),
                    "ÂÜ∑Á´Ø"
                )
            
            print("‚úÖ ClickHouseÊï∞ÊçÆÂ∫ìÈ™åËØÅÂÆåÊàê")
            
        except Exception as e:
            print(f"‚ùå ClickHouseÊï∞ÊçÆÂ∫ìÈ™åËØÅÂ§±Ë¥•: {e}")
            raise
    
    async def _verify_database(self, host: str, port: int, user: str, password: str, database: str, db_type: str):
        """È™åËØÅÂçï‰∏™Êï∞ÊçÆÂ∫ì"""
        try:
            # Ê£ÄÊü•Ë°®ÊòØÂê¶Â≠òÂú®
            tables = ['orderbooks', 'trades', 'funding_rates', 'open_interests', 
                     'liquidations', 'lsrs', 'volatility_indices']
            
            # ÂÖàÂàáÊç¢Âà∞Êï∞ÊçÆÂ∫ì
            await self._execute_query(host, port, user, password, f"USE {database}")

            for table in tables:
                query = f"SELECT count() FROM {table} LIMIT 1"
                await self._execute_query(host, port, user, password, query)
                print(f"‚úÖ {db_type}Ë°®È™åËØÅÊàêÂäü: {table}")
            
            print(f"‚úÖ {db_type}Êï∞ÊçÆÂ∫ìÈ™åËØÅÂÆåÊàê")
            
        except Exception as e:
            print(f"‚ùå {db_type}Êï∞ÊçÆÂ∫ìÈ™åËØÅÂ§±Ë¥•: {e}")
            raise


async def main():
    """‰∏ªÂáΩÊï∞"""
    try:
        # Âä†ËΩΩÈÖçÁΩÆ
        config_path = Path(__file__).parent.parent / "config" / "tiered_storage_config.yaml"
        
        if not config_path.exists():
            print(f"‚ùå ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®: {config_path}")
            sys.exit(1)
        
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # ÂàùÂßãÂåñClickHouse
        initializer = SimpleClickHouseInitializer(config)
        await initializer.initialize()
        await initializer.verify_setup()
        
        print("üéâ ClickHouseÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñÊàêÂäüÔºÅ")
        
    except Exception as e:
        print(f"‚ùå ClickHouseÊï∞ÊçÆÂ∫ìÂàùÂßãÂåñÂ§±Ë¥•: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
