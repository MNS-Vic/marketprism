#!/usr/bin/env python3
"""
MarketPrism Collector TDD ÊµãËØïÊâßË°åËÑöÊú¨

ÊåâÁÖßTDDËÆ°ÂàíÂàÜÈò∂ÊÆµÊâßË°åÊµãËØïÔºåÁîüÊàêËØ¶ÁªÜÊä•Âëä
"""

import os
import sys
import subprocess
import time
import json
from datetime import datetime
from pathlib import Path
import argparse

# Ê∑ªÂä†È°πÁõÆË∑ØÂæÑ
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


class TDDTestRunner:
    """TDDÊµãËØïËøêË°åÂô®"""
    
    def __init__(self):
        self.project_root = project_root
        self.test_results = {}
        self.start_time = datetime.now()
        
    def run_phase(self, phase_name: str, test_patterns: list, description: str = ""):
        """ËøêË°åÊµãËØïÈò∂ÊÆµ"""
        print(f"\n{'='*60}")
        print(f"üß™ ÊâßË°åÊµãËØïÈò∂ÊÆµ: {phase_name}")
        print(f"üìù ÊèèËø∞: {description}")
        print(f"{'='*60}")
        
        phase_start = time.time()
        phase_results = {
            'description': description,
            'start_time': datetime.now().isoformat(),
            'test_files': {},
            'summary': {}
        }
        
        total_tests = 0
        total_passed = 0
        total_failed = 0
        total_skipped = 0
        
        for pattern in test_patterns:
            print(f"\nüìÅ ËøêË°åÊµãËØïÊ®°Âºè: {pattern}")
            
            # ÊûÑÂª∫pytestÂëΩ‰ª§
            cmd = [
                sys.executable, "-m", "pytest",
                pattern,
                "-v",
                "--tb=short",
                "--json-report",
                f"--json-report-file={self.project_root}/tests/reports/{phase_name}_{pattern.replace('/', '_').replace('*', 'all')}.json",
                "--html={}/tests/reports/{}_report.html".format(self.project_root, phase_name),
                "--self-contained-html",
                "--cov=services.python_collector.src.marketprism_collector",
                f"--cov-report=html:{self.project_root}/tests/reports/{phase_name}_coverage",
                "--cov-report=json",
                "--timeout=120"
            ]
            
            try:
                result = subprocess.run(
                    cmd,
                    cwd=self.project_root,
                    capture_output=True,
                    text=True,
                    timeout=600  # 10ÂàÜÈíüË∂ÖÊó∂
                )
                
                # Ëß£ÊûêÁªìÊûú
                if result.returncode == 0:
                    status = "‚úÖ PASSED"
                    print(f"   {status}")
                elif result.returncode == 5:  # pytestÊ≤°ÊúâÊâæÂà∞ÊµãËØï
                    status = "‚ö†Ô∏è NO TESTS"
                    print(f"   {status} - Ê≤°ÊúâÊâæÂà∞ÊµãËØïÊñá‰ª∂")
                else:
                    status = "‚ùå FAILED"
                    print(f"   {status}")
                    print(f"   ÈîôËØØËæìÂá∫: {result.stderr[:500]}")
                
                # Â∞ùËØïËØªÂèñJSONÊä•Âëä
                json_report_path = f"{self.project_root}/tests/reports/{phase_name}_{pattern.replace('/', '_').replace('*', 'all')}.json"
                test_stats = self._parse_json_report(json_report_path)
                
                phase_results['test_files'][pattern] = {
                    'status': status,
                    'return_code': result.returncode,
                    'stdout': result.stdout[-1000:] if result.stdout else "",
                    'stderr': result.stderr[-500:] if result.stderr else "",
                    'stats': test_stats
                }
                
                # Á¥ØËÆ°ÁªüËÆ°
                if test_stats:
                    total_tests += test_stats.get('total', 0)
                    total_passed += test_stats.get('passed', 0)
                    total_failed += test_stats.get('failed', 0)
                    total_skipped += test_stats.get('skipped', 0)
                
            except subprocess.TimeoutExpired:
                print(f"   ‚è∞ TIMEOUT - ÊµãËØïË∂ÖÊó∂")
                phase_results['test_files'][pattern] = {
                    'status': 'TIMEOUT',
                    'return_code': -1,
                    'error': 'Test execution timeout'
                }
            except Exception as e:
                print(f"   üí• ERROR - {e}")
                phase_results['test_files'][pattern] = {
                    'status': 'ERROR',
                    'return_code': -1,
                    'error': str(e)
                }
        
        phase_end = time.time()
        phase_duration = phase_end - phase_start
        
        # Èò∂ÊÆµÊÄªÁªì
        phase_results['summary'] = {
            'total_tests': total_tests,
            'passed': total_passed,
            'failed': total_failed,
            'skipped': total_skipped,
            'duration_seconds': phase_duration,
            'success_rate': (total_passed / total_tests * 100) if total_tests > 0 else 0
        }
        
        phase_results['end_time'] = datetime.now().isoformat()
        
        # ÊòæÁ§∫Èò∂ÊÆµÊÄªÁªì
        print(f"\nüìä Èò∂ÊÆµ {phase_name} ÊÄªÁªì:")
        print(f"   ÊÄªÊµãËØïÊï∞: {total_tests}")
        print(f"   ÈÄöËøá: {total_passed}")
        print(f"   Â§±Ë¥•: {total_failed}")
        print(f"   Ë∑≥Ëøá: {total_skipped}")
        print(f"   ÊàêÂäüÁéá: {phase_results['summary']['success_rate']:.1f}%")
        print(f"   ËÄóÊó∂: {phase_duration:.1f}Áßí")
        
        self.test_results[phase_name] = phase_results
        return phase_results
    
    def _parse_json_report(self, json_path: str) -> dict:
        """Ëß£Êûêpytest JSONÊä•Âëä"""
        try:
            if os.path.exists(json_path):
                with open(json_path, 'r') as f:
                    data = json.load(f)
                
                summary = data.get('summary', {})
                return {
                    'total': summary.get('total', 0),
                    'passed': summary.get('passed', 0),
                    'failed': summary.get('failed', 0),
                    'skipped': summary.get('skipped', 0),
                    'error': summary.get('error', 0)
                }
        except Exception as e:
            print(f"   Ëß£ÊûêJSONÊä•ÂëäÂ§±Ë¥•: {e}")
        
        return {}
    
    def run_all_phases(self):
        """ËøêË°åÊâÄÊúâÊµãËØïÈò∂ÊÆµ"""
        print(f"üöÄ ÂºÄÂßã MarketPrism Collector TDD ÊµãËØï")
        print(f"‚è∞ ÂºÄÂßãÊó∂Èó¥: {self.start_time}")
        
        # Á°Æ‰øùÊä•ÂëäÁõÆÂΩïÂ≠òÂú®
        os.makedirs(f"{self.project_root}/tests/reports", exist_ok=True)
        
        # Phase 1: ÂçïÂÖÉÊµãËØï
        self.run_phase(
            "phase1_unit",
            [
                "tests/unit/collector/test_core_integration.py",
                "tests/unit/collector/*.py"
            ],
            "È™åËØÅÂêÑ‰∏™ÁªÑ‰ª∂ÁöÑÁã¨Á´ãÂäüËÉΩÂíåCoreÊ®°ÂùóÈõÜÊàê"
        )
        
        # Phase 2: ÈõÜÊàêÊµãËØï
        self.run_phase(
            "phase2_integration", 
            [
                "tests/integration/collector/test_exchange_adapters.py",
                "tests/integration/collector/*.py"
            ],
            "È™åËØÅÁªÑ‰ª∂Èó¥ÁöÑ‰∫§‰∫íÂíå‰∫§ÊòìÊâÄËøûÊé•"
        )
        
        # Phase 3: Á´ØÂà∞Á´ØÊµãËØï
        self.run_phase(
            "phase3_e2e",
            [
                "tests/e2e/collector/test_real_data_collection.py"
            ],
            "È™åËØÅÂÆåÊï¥ÁöÑÊï∞ÊçÆÊî∂ÈõÜÊµÅÁ®ã"
        )
        
        # Phase 4: ÊÄßËÉΩÂíåÁ®≥ÂÆöÊÄßÊµãËØïÔºàÂèØÈÄâÔºâ
        if self._should_run_performance_tests():
            self.run_phase(
                "phase4_performance",
                [
                    "tests/performance/collector/*.py"
                ],
                "È™åËØÅÁ≥ªÁªüÂú®È´òË¥üËΩΩ‰∏ãÁöÑË°®Áé∞"
            )
        
        # ÁîüÊàêÊúÄÁªàÊä•Âëä
        self.generate_final_report()
    
    def _should_run_performance_tests(self) -> bool:
        """Âà§Êñ≠ÊòØÂê¶Â∫îËØ•ËøêË°åÊÄßËÉΩÊµãËØï"""
        # Â¶ÇÊûúÂâçÈù¢ÁöÑÊµãËØïÈÄöËøáÁéá‰Ωé‰∫é80%ÔºåË∑≥ËøáÊÄßËÉΩÊµãËØï
        overall_success_rate = self._calculate_overall_success_rate()
        return overall_success_rate >= 80.0
    
    def _calculate_overall_success_rate(self) -> float:
        """ËÆ°ÁÆóÊï¥‰ΩìÊàêÂäüÁéá"""
        total_tests = 0
        total_passed = 0
        
        for phase_result in self.test_results.values():
            summary = phase_result.get('summary', {})
            total_tests += summary.get('total_tests', 0)
            total_passed += summary.get('passed', 0)
        
        return (total_passed / total_tests * 100) if total_tests > 0 else 0
    
    def generate_final_report(self):
        """ÁîüÊàêÊúÄÁªàÊµãËØïÊä•Âëä"""
        end_time = datetime.now()
        total_duration = (end_time - self.start_time).total_seconds()
        
        overall_success_rate = self._calculate_overall_success_rate()
        
        final_report = {
            'test_run_info': {
                'start_time': self.start_time.isoformat(),
                'end_time': end_time.isoformat(),
                'total_duration_seconds': total_duration,
                'overall_success_rate': overall_success_rate
            },
            'phases': self.test_results,
            'recommendations': self._generate_recommendations()
        }
        
        # ‰øùÂ≠òËØ¶ÁªÜÊä•Âëä
        report_path = f"{self.project_root}/tests/reports/tdd_final_report.json"
        with open(report_path, 'w') as f:
            json.dump(final_report, f, indent=2, ensure_ascii=False)
        
        # ÊòæÁ§∫ÊúÄÁªàÊÄªÁªì
        print(f"\n{'='*80}")
        print(f"üéØ MarketPrism Collector TDD ÊµãËØïÂÆåÊàê")
        print(f"{'='*80}")
        print(f"‚è∞ ÊÄªËÄóÊó∂: {total_duration:.1f}Áßí")
        print(f"üìä Êï¥‰ΩìÊàêÂäüÁéá: {overall_success_rate:.1f}%")
        
        # ÊòæÁ§∫ÂêÑÈò∂ÊÆµÁªìÊûú
        for phase_name, phase_result in self.test_results.items():
            summary = phase_result['summary']
            status_emoji = "‚úÖ" if summary['success_rate'] >= 80 else "‚ö†Ô∏è" if summary['success_rate'] >= 60 else "‚ùå"
            print(f"{status_emoji} {phase_name}: {summary['success_rate']:.1f}% ({summary['passed']}/{summary['total_tests']})")
        
        # ÊòæÁ§∫Âª∫ËÆÆ
        recommendations = final_report['recommendations']
        if recommendations:
            print(f"\nüí° ÊîπËøõÂª∫ËÆÆ:")
            for i, rec in enumerate(recommendations, 1):
                print(f"   {i}. {rec}")
        
        print(f"\nüìÑ ËØ¶ÁªÜÊä•Âëä: {report_path}")
        
        # ËøîÂõûÊàêÂäüÁä∂ÊÄÅ
        return overall_success_rate >= 80.0
    
    def _generate_recommendations(self) -> list:
        """ÁîüÊàêÊîπËøõÂª∫ËÆÆ"""
        recommendations = []
        overall_success_rate = self._calculate_overall_success_rate()
        
        if overall_success_rate < 60:
            recommendations.append("Êï¥‰ΩìÊµãËØïÈÄöËøáÁéáËøá‰ΩéÔºåÈúÄË¶ÅÈáçÁÇπÊ£ÄÊü•Ê†∏ÂøÉÂäüËÉΩÂÆûÁé∞")
        elif overall_success_rate < 80:
            recommendations.append("ÈÉ®ÂàÜÊµãËØïÂ§±Ë¥•ÔºåÂª∫ËÆÆ‰ºòÂÖà‰øÆÂ§çÂ§±Ë¥•ÁöÑÊµãËØïÁî®‰æã")
        
        # ÂàÜÊûêÂêÑÈò∂ÊÆµ
        for phase_name, phase_result in self.test_results.items():
            summary = phase_result['summary']
            if summary['success_rate'] < 60:
                recommendations.append(f"{phase_name} Èò∂ÊÆµÈóÆÈ¢ò‰∏•ÈáçÔºåÈúÄË¶ÅÈáçÁÇπÂÖ≥Ê≥®")
            elif summary['failed'] > 0:
                recommendations.append(f"{phase_name} Èò∂ÊÆµÊúâ {summary['failed']} ‰∏™ÊµãËØïÂ§±Ë¥•ÔºåÈúÄË¶Å‰øÆÂ§ç")
        
        # Ê£ÄÊü•Ë∑≥ËøáÁöÑÊµãËØï
        total_skipped = sum(phase['summary']['skipped'] for phase in self.test_results.values())
        if total_skipped > 10:
            recommendations.append(f"Êúâ {total_skipped} ‰∏™ÊµãËØïË¢´Ë∑≥ËøáÔºåÂèØËÉΩÈúÄË¶ÅËß£ÂÜ≥ÁéØÂ¢É‰æùËµñÈóÆÈ¢ò")
        
        return recommendations


def main():
    """‰∏ªÂáΩÊï∞"""
    parser = argparse.ArgumentParser(description="MarketPrism Collector TDD ÊµãËØïÊâßË°åÂô®")
    parser.add_argument("--phase", choices=["unit", "integration", "e2e", "performance", "all"], 
                       default="all", help="ÊåáÂÆöË¶ÅËøêË°åÁöÑÊµãËØïÈò∂ÊÆµ")
    parser.add_argument("--fast", action="store_true", help="Âø´ÈÄüÊ®°ÂºèÔºåË∑≥ËøáËÄóÊó∂ÁöÑÊµãËØï")
    parser.add_argument("--verbose", action="store_true", help="ËØ¶ÁªÜËæìÂá∫")
    
    args = parser.parse_args()
    
    runner = TDDTestRunner()
    
    if args.phase == "all":
        success = runner.run_all_phases()
    else:
        # ËøêË°åÊåáÂÆöÈò∂ÊÆµ
        phase_map = {
            "unit": ("phase1_unit", ["tests/unit/collector/*.py"], "ÂçïÂÖÉÊµãËØï"),
            "integration": ("phase2_integration", ["tests/integration/collector/*.py"], "ÈõÜÊàêÊµãËØï"),
            "e2e": ("phase3_e2e", ["tests/e2e/collector/*.py"], "Á´ØÂà∞Á´ØÊµãËØï"),
            "performance": ("phase4_performance", ["tests/performance/collector/*.py"], "ÊÄßËÉΩÊµãËØï")
        }
        
        if args.phase in phase_map:
            phase_name, patterns, description = phase_map[args.phase]
            result = runner.run_phase(phase_name, patterns, description)
            success = result['summary']['success_rate'] >= 80.0
        else:
            print(f"Êú™Áü•ÁöÑÊµãËØïÈò∂ÊÆµ: {args.phase}")
            return 1
    
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())