#!/usr/bin/env python3\n\"\"\"\n直接运行TDD测试的脚本，绕过pytest问题\n\"\"\"\nimport sys\nimport os\nimport traceback\n\n# 添加搜索路径\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '../services/python-collector/src'))\n\ndef run_test(test_name, test_func):\n    \"\"\"运行单个测试\"\"\"\n    try:\n        test_func()\n        print(f\"✅ {test_name} - PASSED\")\n        return True\n    except Exception as e:\n        print(f\"❌ {test_name} - FAILED: {e}\")\n        traceback.print_exc()\n        return False\n\ndef test_collector_import():\n    \"\"\"测试收集器导入\"\"\"\n    from marketprism_collector.collector import MarketDataCollector\n    assert MarketDataCollector is not None\n\ndef test_config_import():\n    \"\"\"测试配置导入\"\"\"\n    from marketprism_collector.config import Config\n    assert Config is not None\n\ndef test_core_services_available():\n    \"\"\"测试Core服务可用性\"\"\"\n    from marketprism_collector.core_services import core_services\n    assert core_services is not None\n    \n    status = core_services.get_services_status()\n    assert isinstance(status, dict)\n    print(f\"   Core服务状态: {status}\")\n\ndef test_basic_collector_instantiation():\n    \"\"\"测试基础收集器实例化\"\"\"\n    from marketprism_collector.collector import MarketDataCollector\n    from types import SimpleNamespace\n    \n    # 创建最小配置\n    config = SimpleNamespace(\n        collector=SimpleNamespace(\n            http_port=8080,\n            exchanges=['binance'],\n            log_level='INFO'\n        ),\n        exchanges=SimpleNamespace(\n            binance=SimpleNamespace(\n                enabled=True,\n                websocket_url='wss://stream.binance.com:9443'\n            )\n        ),\n        nats=SimpleNamespace(\n            url='nats://localhost:4222'\n        )\n    )\n    \n    # 实例化收集器\n    collector = MarketDataCollector(config)\n    assert collector is not None\n    assert collector.config == config\n    assert not collector.is_running\n    print(f\"   收集器创建成功，端口: {config.collector.http_port}\")\n\ndef test_core_integration_works():\n    \"\"\"测试Core集成正常工作\"\"\"\n    from marketprism_collector.core_integration import (\n        get_core_integration,\n        log_collector_info,\n        handle_collector_error\n    )\n    \n    # 获取集成实例\n    integration = get_core_integration()\n    assert integration is not None\n    print(f\"   Core集成实例: {type(integration).__name__}\")\n    \n    # 测试日志记录\n    log_collector_info(\"TDD测试消息\")\n    print(\"   日志记录功能正常\")\n    \n    # 测试错误处理\n    test_error = ValueError(\"TDD测试错误\")\n    error_id = handle_collector_error(test_error)\n    assert error_id is not None\n    assert isinstance(error_id, str)\n    print(f\"   错误处理功能正常，错误ID: {error_id}\")\n\ndef test_config_path_manager():\n    \"\"\"测试配置路径管理器\"\"\"\n    from marketprism_collector.config_paths import config_paths\n    \n    # 测试路径解析\n    project_root = config_paths.get_project_root()\n    assert project_root is not None\n    print(f\"   项目根目录: {project_root}\")\n    \n    config_dir = config_paths.get_config_dir()\n    assert config_dir is not None\n    print(f\"   配置目录: {config_dir}\")\n\ndef main():\n    \"\"\"运行所有Green阶段测试\"\"\"\n    print(\"🚀 开始TDD Green阶段测试\")\n    print(\"=\" * 50)\n    \n    tests = [\n        (\"收集器导入测试\", test_collector_import),\n        (\"配置导入测试\", test_config_import),\n        (\"Core服务可用性测试\", test_core_services_available),\n        (\"基础收集器实例化测试\", test_basic_collector_instantiation),\n        (\"Core集成功能测试\", test_core_integration_works),\n        (\"配置路径管理器测试\", test_config_path_manager),\n    ]\n    \n    passed = 0\n    failed = 0\n    \n    for test_name, test_func in tests:\n        if run_test(test_name, test_func):\n            passed += 1\n        else:\n            failed += 1\n        print()\n    \n    print(\"=\" * 50)\n    print(f\"📊 测试结果：通过 {passed}，失败 {failed}\")\n    \n    if failed == 0:\n        print(\"🎉 所有Green阶段测试通过！准备进入Refactor阶段\")\n        return True\n    else:\n        print(\"⚠️  有测试失败，需要继续修复\")\n        return False\n\nif __name__ == \"__main__\":\n    success = main()\n    sys.exit(0 if success else 1)\n"