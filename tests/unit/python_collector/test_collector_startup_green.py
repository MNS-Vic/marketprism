from datetime import datetime, timezone
#!/usr/bin/env python3\n\"\"\"\nTDD测试：Python-Collector启动流程 - Green阶段\n验证基础功能确实能够工作\n\nGreen阶段: 验证修复后的系统能够正常工作\n\"\"\"\nimport pytest\nimport asyncio\nimport sys\nimport os\nfrom unittest.mock import Mock, AsyncMock, patch, MagicMock\nfrom pathlib import Path\nimport tempfile\nimport yaml\nfrom types import SimpleNamespace\n\n# 添加搜索路径\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '../../../services/python-collector/src'))\n\nclass TestCollectorStartupGreen:\n    \"\"\"TDD Green阶段：验证系统能够正常工作\"\"\"\n    \n    def test_collector_can_be_instantiated_with_valid_config(self):\n        \"\"\"测试：能够使用有效配置实例化收集器\"\"\"\n        from marketprism_collector.collector import MarketDataCollector\n        from marketprism_collector.config import Config\n        \n        # 创建最小配置\n        config_data = {\n            'collector': {\n                'http_port': 8080,\n                'exchanges': ['binance'],\n                'log_level': 'INFO'\n            },\n            'exchanges': {\n                'binance': {\n                    'enabled': True,\n                    'websocket_url': 'wss://stream.binance.com:9443'\n                }\n            },\n            'nats': {\n                'url': 'nats://localhost:4222'\n            }\n        }\n        \n        # 使用临时文件创建配置\n        with tempfile.NamedTemporaryFile(mode='w', suffix='.yaml', delete=False) as f:\n            yaml.dump(config_data, f)\n            config_file = f.name\n        \n        try:\n            config = Config.load_from_file(config_file)\n            collector = MarketDataCollector(config)\n            \n            # 验证收集器初始化成功\n            assert collector is not None\n            assert collector.config == config\n            assert collector.metrics is not None\n            assert collector.core_integration is not None\n            assert not collector.is_running  # 初始状态应该是未运行\n            \n        finally:\n            os.unlink(config_file)\n    \n    def test_core_services_are_properly_integrated(self):\n        \"\"\"测试：Core服务能够正确集成\"\"\"\n        from marketprism_collector.core_services import core_services\n        \n        # 验证Core服务适配器可用\n        assert core_services is not None\n        \n        # 验证服务状态检查方法\n        status = core_services.get_services_status()\n        assert isinstance(status, dict)\n        assert 'core_services_available' in status\n        \n        # 验证基础服务方法可调用（即使在降级模式下）\n        # 记录指标（降级模式下应该不抛异常）\n        core_services.record_metric(\"test_metric\", 1.0, {\"test\": \"value\"})\n        \n        # 日志记录（降级模式下应该不抛异常）\n        core_services.log_info(\"测试消息\")\n        core_services.log_error(\"测试错误消息\")\n    \n    def test_config_paths_work_correctly(self):\n        \"\"\"测试：配置路径管理器能够正常工作\"\"\"\n        from marketprism_collector.config import config_path_manager\n        \n        # 验证配置路径管理器可用\n        assert config_path_manager is not None\n        \n        # 验证项目根路径解析\n        project_root = config_path_manager.get_project_root()\n        assert project_root is not None\n        assert Path(project_root).exists()\n        \n        # 验证基础配置路径\n        config_dir = config_path_manager.get_config_dir()\n        assert config_dir is not None\n        assert 'config' in config_dir\n    \n    @pytest.mark.asyncio\n    async def test_collector_health_check_works(self):\n        \"\"\"测试：收集器健康检查能够正常工作\"\"\"\n        from marketprism_collector.collector import MarketDataCollector\n        from marketprism_collector.config import Config\n        \n        # 创建测试配置\n        config = SimpleNamespace(\n            collector=SimpleNamespace(\n                http_port=8080,\n                exchanges=['binance'],\n                log_level='INFO'\n            ),\n            exchanges=SimpleNamespace(\n                binance=SimpleNamespace(\n                    enabled=True,\n                    websocket_url='wss://stream.binance.com:9443'\n                )\n            ),\n            nats=SimpleNamespace(\n                url='nats://localhost:4222'\n            )\n        )\n        \n        collector = MarketDataCollector(config)\n        \n        # 验证健康检查器存在\n        assert collector.health_checker is not None\n        \n        # 验证指标收集器存在\n        metrics = collector.get_metrics()\n        assert metrics is not None\n        assert hasattr(metrics, 'uptime_seconds')\n    \n    def test_error_handling_works_gracefully(self):\n        \"\"\"测试：错误处理能够优雅工作\"\"\"\n        from marketprism_collector.core_integration import handle_collector_error\n        \n        # 测试错误处理\n        test_error = ValueError(\"测试错误\")\n        error_id = handle_collector_error(test_error)\n        \n        # 验证错误处理返回有效的错误ID\n        assert error_id is not None\n        assert isinstance(error_id, str)\n        assert len(error_id) > 0\n    \n    def test_logging_integration_works(self):\n        \"\"\"测试：日志集成能够正常工作\"\"\"\n        from marketprism_collector.core_integration import log_collector_info, log_collector_error\n        \n        # 测试日志记录（不应该抛异常）\n        log_collector_info(\"测试信息日志\", test_field=\"test_value\")\n        log_collector_error(\"测试错误日志\", error_code=\"TEST_ERROR\")\n        \n        # 如果到这里没有异常，说明日志集成工作正常\n        assert True\n    \n    def test_metric_recording_works(self):\n        \"\"\"测试：指标记录能够正常工作\"\"\"\n        from marketprism_collector.core_integration import record_collector_metric\n        \n        # 测试指标记录（不应该抛异常）\n        record_collector_metric(\"test_metric\", 1.0, component=\"test\")\n        record_collector_metric(\"test_counter\", 5.0, exchange=\"binance\", data_type=\"trade\")\n        \n        # 如果到这里没有异常，说明指标记录工作正常\n        assert True\n    \n    def test_exchange_adapter_factory_is_accessible(self):\n        \"\"\"测试：交易所适配器工厂可访问\"\"\"\n        from marketprism_collector.exchanges import ExchangeAdapterFactory\n        \n        # 验证工厂类存在\n        assert ExchangeAdapterFactory is not None\n        \n        # 验证工厂有必要的方法\n        assert hasattr(ExchangeAdapterFactory, 'create_adapter')\n    \n    def test_nats_client_components_are_accessible(self):\n        \"\"\"测试：NATS客户端组件可访问\"\"\"\n        from marketprism_collector.nats_client import NATSManager, EnhancedMarketDataPublisher\n        \n        # 验证NATS组件存在\n        assert NATSManager is not None\n        assert EnhancedMarketDataPublisher is not None\n    \n    def test_data_normalizer_is_functional(self):\n        \"\"\"测试：数据标准化器可正常使用\"\"\"\n        from marketprism_collector.normalizer import DataNormalizer\n        \n        # 创建标准化器实例\n        normalizer = DataNormalizer()\n        assert normalizer is not None\n        \n        # 验证基础方法存在\n        assert hasattr(normalizer, 'normalize_trade')\n        assert hasattr(normalizer, 'normalize_orderbook')\n\nclass TestCollectorAdvancedIntegration:\n    \"\"\"高级集成测试\"\"\"\n    \n    @pytest.mark.asyncio\n    async def test_collector_startup_sequence_mock(self):\n        \"\"\"测试：收集器启动序列（使用Mock）\"\"\"\n        from marketprism_collector.collector import MarketDataCollector\n        \n        # 创建测试配置\n        config = SimpleNamespace(\n            collector=SimpleNamespace(\n                http_port=8080,\n                exchanges=['binance'],\n                log_level='INFO',\n                use_real_exchanges=False  # 使用Mock模式\n            ),\n            exchanges=SimpleNamespace(\n                binance=SimpleNamespace(\n                    enabled=True,\n                    websocket_url='wss://stream.binance.com:9443'\n                )\n            ),\n            nats=SimpleNamespace(\n                url='nats://localhost:4222',\n                streams={}\n            )\n        )\n        \n        collector = MarketDataCollector(config)\n        \n        # Mock外部依赖\n        with patch.object(collector, '_start_http_server', new_callable=AsyncMock) as mock_http, \\\n             patch.object(collector, '_start_exchange_adapters', new_callable=AsyncMock) as mock_exchanges, \\\n             patch.object(collector, '_init_monitoring_system', new_callable=AsyncMock) as mock_monitoring:\n            \n            # Mock NATS Manager\n            mock_nats = AsyncMock()\n            mock_nats.start.return_value = True\n            mock_nats.get_publisher.return_value = Mock()\n            collector.nats_manager = mock_nats\n            \n            # Mock ClickHouse Writer\n            mock_clickhouse = AsyncMock()\n            mock_clickhouse.start.return_value = True\n            collector.clickhouse_writer = mock_clickhouse\n            \n            # 尝试启动收集器\n            result = await collector.start()\n            \n            # 验证启动流程调用了正确的方法\n            mock_monitoring.assert_called_once()\n            mock_nats.start.assert_called_once()\n            mock_exchanges.assert_called_once()\n            mock_http.assert_called_once()\n            \n            # 验证启动成功\n            assert result is True\n            assert collector.is_running is True\n            \n            # 清理\n            await collector.stop()\n    \n    def test_config_validation_comprehensive(self):\n        \"\"\"测试：配置验证的全面性\"\"\"\n        from marketprism_collector.config import Config\n        \n        # 测试配置类的基本功能\n        assert Config is not None\n        assert hasattr(Config, 'load_from_file')\n        \n        # 验证无效配置会被正确处理\n        with pytest.raises((FileNotFoundError, ValueError, TypeError)):\n            Config.load_from_file(\"/nonexistent/path/config.yaml\")\n"